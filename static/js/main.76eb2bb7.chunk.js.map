{"version":3,"sources":["assets/preloading.png","components/Preloader.js","DataHandling.js","components/CountyMap/County.js","components/CountyMap/CountyMap.js","components/Histogram/HistogramBar.js","components/Histogram/Axis.js","components/D3blackbox.js","components/Histogram/Histogram.js","components/Meta/USStatesMap.js","components/Meta/Title.js","components/Meta/Description.js","components/MedianLine.js","components/Controls/Toggle.js","components/Controls/ControlRow.js","components/Controls/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Preloader","className","src","PreloaderImg","style","width","alt","cleanIncome","d","countyName","USstate","medianIncome","Number","lowerBound","upperBound","dateParse","d3","cleanSalary","employer","submit_date","start_date","case_status","job_title","clean_job_title","base_salary","city","county","countyID","cleanUSStateName","code","id","name","cleanCounty","ChoroplethColors","_","reverse","County","nextProps","nextState","this","props","zoom","value","geoPath","feature","quantize","color","fill","title","Component","CountyMap","projection","scale","state","range","usTopoJson","values","us","USstatesMesh","topojson","objects","states","a","b","counties","features","countyValueMap","fromPairs","map","key","stroke","strokeLinejoin","translate","height","USstatePaths","find","USstateNames","centroid","domain","React","HistogramBar","percent","x","y","label","toFixed","replace","transform","textAnchor","D3render","Axis","axis","tickFormat","ticks","data","length","anchorRef","current","call","createRef","ref","Histogram","histogram","widthScale","yScale","makeBar","bar","axisMargin","x1","x0","bars","thresholds","bins","counts","bottomMargin","Title","filteredBy","USStatesMap","toUpperCase","mean","format","d3mean","yearsFragment","USstateFragment","jobTitleFragment","stateFragment","year","jobTitle","scaleLinear","d3extent","Description","allData","filter","getFullYear","deviation","d3deviation","UStateFragment","previousYearFragment","countyFragment","fragment","lastYear","allDataForYear","allDataForJobTitle","allDataForUSstate","Math","abs","byCounty","groupBy","medians","medianIncomesByCounty","ordered","sortBy","keys","items","best","countyMedian","byCity","S","titleCase","s","jobFragment","yearFragment","href","MedianLine","median","line","medianValue","medianLabel","background","Toggle","onClick","ControlRow","makePick","picked","newState","updateDataFilter","capitalize","toggleNames","_addToggle","Controls","yearFilter","jobTitleFilter","USstateFilter","updateYearFilter","reset","setState","reportUpdateUpTheChain","updateJobTitleFilter","updateUSstateFilter","window","location","hash","split","filters","join","years","Set","jobTitles","USstates","Array","from","App","techSalaries","medianIncomes","countyNames","salariesFilter","callback","noop","Promise","all","then","medianIncomesMap","forEach","isNull","medianIncomesByUSState","loadAllData","techSalariesMap","medianHousehold","salaries","filteredSalaries","filteredSalariesMap","countyValues","countyValue","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.76eb2bb7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/preloading.0e87f8f1.png\";","import React from \"react\";\n\nimport PreloaderImg from \"../assets/preloading.png\"\n\nconst Preloader = () => (\n    <div className=\"App container\">\n        <h1>The average H1B in tech pays $86,164/year</h1>\n        <p className=\"lead\">\n            Since 2012 the US tech industry has sponsored 176,075 H1B work\n            visas. Most of them paid <b>$60,660 to $111,668</b> per year (1\n            standard deviation).{\" \"}\n            <span>\n                The best city for an H1B is <b>Kirkland, WA</b> with an average\n                individual salary <b>$39,465 above local household median</b>.\n                Median household salary is a good proxy for cost of living in an\n                area.\n            </span>\n        </p>\n        <img\n            src={PreloaderImg}\n            style={{ width: \"100%\" }}\n            alt=\"Loading preview\"\n        />\n        <h2 className=\"text-center\">Loading data ...</h2>\n    </div>\n);\n\nexport default Preloader;","import * as d3 from 'd3';\nimport _ from 'lodash';\n\nconst cleanIncome = (d) => ({\n    countyName: d['Name'],\n    USstate: d['State'],\n    medianIncome: Number(d['Median Household Income']),\n    lowerBound: Number(d['90% CI Lower Bound']),\n    upperBound: Number(d['90% CI Upper Bound'])\n});\n\nconst dateParse = d3.timeParse(\"%m/%d/%Y\");\n\nconst cleanSalary = (d) => {\n    if (!d['base salary'] || Number(d['base salary']) > 300000) {\n        return null;\n    }\n\n    return {employer: d.employer,\n            submit_date: dateParse(d['submit date']),\n            start_date: dateParse(d['start date']),\n            case_status: d['case status'],\n            job_title: d['job title'],\n            clean_job_title: d['job title'],\n            base_salary: Number(d['base salary']),\n            city: d['city'],\n            USstate: d['state'],\n            county: d['county'],\n            countyID: d['countyID']\n    };\n}\n\nconst cleanUSStateName = (d) => ({\n    code: d.code,\n    id: Number(d.id),\n    name: d.name\n});\n\nconst cleanCounty = d => ({\n    id: Number(d.id),\n    name: d.name\n});\n\nexport const loadAllData =(callback = _.noop) => {\n\n    Promise.all ([\n        d3.json(\"data/us.json\"),\n        d3.csv(\"data/us-county-names-normalized.csv\", cleanCounty),\n        d3.csv(\"data/county-median-incomes.csv\", cleanIncome),\n        d3.csv(\"data/h1bs-2012-2016.csv\", cleanSalary),\n        d3.tsv(\"data/us-state-names.tsv\", cleanUSStateName)\n    ]).then (([us, countyNames, medianIncomes, techSalaries, USstateNames]) => {\n        let medianIncomesMap = {};\n\n        medianIncomes.filter(d => _.find(countyNames,\n                                         {name: d['countyName']}))\n                     .forEach((d) => {\n                         d['countyID'] = _.find(countyNames,\n                                                {name: d['countyName']}).id;\n                         medianIncomesMap[d.countyID] = d;\n                     });\n    \n        techSalaries = techSalaries.filter(d => !_.isNull(d));\n    \n        callback({\n            usTopoJson: us,\n            countyNames: countyNames,\n            medianIncomes: medianIncomesMap,\n            medianIncomesByCounty: _.groupBy(medianIncomes, 'countyName'),\n            medianIncomesByUSState: _.groupBy(medianIncomes, 'USstate'),\n            techSalaries: techSalaries,\n            USstateNames: USstateNames\n        });\n\n    });\n}","import React, { Component } from 'react';\nimport _ from 'lodash';\n\nconst ChoroplethColors = _.reverse([\n    'rgb(247,251,255)',\n    'rgb(222,235,247)',\n    'rgb(198,219,239)',\n    'rgb(158,202,225)',\n    'rgb(107,174,214)',\n    'rgb(66,146,198)',\n    'rgb(33,113,181)',\n    'rgb(8,81,156)',\n    'rgb(8,48,107)'\n]);\n\nconst BlankColor = 'rgb(240,240,240)'\nclass County extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        const { zoom, value } = this.props;\n\n        return zoom !== nextProps.zoom\n            || value !== nextProps.value;\n    }\n\n    render() {\n        const { value, geoPath, feature, quantize } = this.props;\n\n        let color = BlankColor;\n\n        if (value) {\n            color = ChoroplethColors[quantize(value)];\n        }\n\n        return (\n            <path d={geoPath(feature)}\n                  style={{fill: color}}\n                  title={feature.id} />\n        );\n    }\n}\n\nexport default County;","import React, {Component} from 'react';\nimport * as d3 from 'd3';\nimport * as topojson from 'topojson';\nimport _ from 'lodash';\n\nimport County from './County';\n\nclass CountyMap extends React.Component {\n      constructor (props) {\n          super(props);\n          const projection = d3.geoAlbersUsa().scale(1280);\n          this.state = {\n              geoPath: d3.geoPath().projection(projection),\n              quantize: d3.scaleQuantize().range(d3.range(9)),\n              projection\n          }\n      }\n\n      static getDerivedStateFromProps (props,state){\n        let {projection, quantize, geoPath} = state;\n        projection\n            .translate([props.width /2 , props.height/2])\n            .scale(props.width * 1.3);\n        if (props.zoom && props.usTopoJson) {\n            const us = props.usTopoJson,\n                USstatePaths = topojson.feature(us, us.objects.states).features,\n                id = _.find(props.USstateNames,{code:props.zoom}).id;\n\n                projection.scale(props.width * 4.5);\n                const centroid = geoPath.centroid(_.find(USstatePaths, { id: id })),\n                translate = projection.translate();\n\n            projection.translate([\n                translate[0] - centroid[0] + props.width / 2,\n                translate[1] - centroid[1] + props.height / 2\n            ]);\n        }\n        if (props.values) {\n            quantize.domain([\n                d3.quantile(props.values,0.15, d=>d.value),\n                d3.quantile(props.values,0.85, d=>d.value)\n            ]);\n        }\n        return {\n            ...state,\n            projection,\n            quantize\n        }\n\n      }\n\n      render() {\n        const {geoPath,quantize} = this.state;\n        const {usTopoJson,values,zoom} = this.props;\n\n        if (!usTopoJson) {\n            return null;\n        }else {\n            const us = usTopoJson,\n                USstatesMesh = topojson.mesh (\n                    us,\n                    us.objects.states,\n                    (a,b)=>a!==b\n                ),\n                counties = topojson.feature(us,us.objects.counties).features\n                const countyValueMap = _.fromPairs(\n                    values.map(d=> [d.countyID,d.value])\n                );\n            return (\n                <g>\n                    {counties.map (feature => (\n                        <County\n                        geoPath = {geoPath}\n                        feature = {feature}\n                        zoom = {zoom}\n                        key = {feature.id}\n                        quantize = {quantize}\n                        value = {countyValueMap[feature.id]}\n                        \n                        />\n                    ))}\n                    <path \n                    d = {geoPath(USstatesMesh)}\n                    style = {{\n                        fill:\"none\",\n                        stroke:\"#fff\",\n                        strokeLinejoin:\"round\"\n                    }}\n                    />\n\n                </g>    \n            )\n        }\n\n      }\n}\n\nexport default CountyMap;","import React from \"react\";\n\nconst HistogramBar = ({ percent, x, y, width, height }) => {\n    let translate = `translate(${x}, ${y})`,\n        label = percent.toFixed(0) + \"%\";\n\n    if (percent < 1) {\n        label = percent.toFixed(2) + \"%\";\n    }\n\n    if (width < 20) {\n        label = label.replace(\"%\", \"\");\n    }\n\n    if (width < 10) {\n        label = \"\";\n    }\n\n    return (\n        <g transform={translate} className=\"bar\">\n            <rect\n                width={width}\n                height={height - 2}\n                transform=\"translate(0, 1)\"\n            />\n            <text textAnchor=\"end\" x={width - 5} y={height / 2 + 3}>\n                {label}\n            </text>\n        </g>\n    );\n};\n\nexport default HistogramBar;","import * as d3 from \"d3\";\nimport D3blackbox from \"../D3blackbox\"\n\nconst Axis = D3blackbox(function() {\n    const axis = d3\n        .axisLeft()\n        .tickFormat(d => `${d3.format(\".2s\")(d)}`)\n        .scale(this.props.scale)\n        .ticks(this.props.data.length);\n\n    d3.select(this.anchorRef.current).call(axis);\n});\n\nexport default Axis","import React from \"react\";\n\nexport default function D3blackbox(D3render) {\n    return class Blackbox extends React.Component {\n        anchorRef = React.createRef();\n\n        componentDidMount() {\n            D3render.call(this);\n        }\n        componentDidUpdate() {\n            D3render.call(this);\n        }\n\n        render() {\n            const { x, y } = this.props;\n            return (\n                <g transform={`translate(${x}, ${y})`} ref={this.anchorRef} />\n            );\n        }\n    };\n}","import React from \"react\";\nimport * as d3 from \"d3\";\nimport HistogramBar from \"./HistogramBar\";\nimport Axis from \"./Axis\"\n\nclass Histogram extends React.Component {\n\n    state = {\n        histogram : d3.histogram(),\n        widthScale : d3.scaleLinear(),\n        yScale : d3.scaleLinear()\n    }\n    \n    static getDerivedStateFromProps(props,state) {\n        let {histogram,widthScale,yScale} = state;  \n        \n        histogram.thresholds(props.bins).value(props.value);\n\n        const bars = histogram(props.data),\n        counts = bars.map(d=>d.length);\n\n        widthScale\n            .domain([d3.min(counts), d3.max(counts)])\n            .range([0, props.width - props.axisMargin]);\n\n        yScale\n            .domain([0, d3.max(bars, d => d.x1)])\n            .range([props.height - props.y - props.bottomMargin, 0]);\n        return {\n            ...state,\n            histogram,\n            widthScale,\n            yScale\n        };\n       \n    }\n\n    makeBar = bar => {\n        const { yScale, widthScale } = this.state;\n\n        let percent = (bar.length / this.props.data.length) * 100;\n\n        let props = {\n            percent,\n            x: this.props.axisMargin,\n            y: yScale(bar.x1),\n            width: widthScale(bar.length),\n            height: yScale(bar.x0) - yScale(bar.x1),\n            key: `histogram-bar-${bar.x0}`\n        };\n\n        return <HistogramBar {...props} />;\n    };\n\n    render() {\n        const {histogram,widthScale,yScale} = this.state,\n        {x,y,data,axisMargin} = this.props;\n        \n        const bars = histogram(data);\n\n\n        return(\n         <g className =\"histogram\" transform ={`translate (${x},${y})`}>\n            <g className=\"bars\">\n            {bars.map(this.makeBar)}\n            </g>    \n            <Axis x={axisMargin-3} y={0} data={bars} scale={yScale}/>\n        </g>\n\n        )\n\n    }\n\n\n}\nexport default Histogram;","\nexport default {\n    \"AL\": \"Alabama\",\n    \"AK\": \"Alaska\",\n    \"AS\": \"American Samoa\",\n    \"AZ\": \"Arizona\",\n    \"AR\": \"Arkansas\",\n    \"CA\": \"California\",\n    \"CO\": \"Colorado\",\n    \"CT\": \"Connecticut\",\n    \"DE\": \"Delaware\",\n    \"DC\": \"District Of Columbia\",\n    \"FM\": \"Federated States Of Micronesia\",\n    \"FL\": \"Florida\",\n    \"GA\": \"Georgia\",\n    \"GU\": \"Guam\",\n    \"HI\": \"Hawaii\",\n    \"ID\": \"Idaho\",\n    \"IL\": \"Illinois\",\n    \"IN\": \"Indiana\",\n    \"IA\": \"Iowa\",\n    \"KS\": \"Kansas\",\n    \"KY\": \"Kentucky\",\n    \"LA\": \"Louisiana\",\n    \"ME\": \"Maine\",\n    \"MH\": \"Marshall Islands\",\n    \"MD\": \"Maryland\",\n    \"MA\": \"Massachusetts\",\n    \"MI\": \"Michigan\",\n    \"MN\": \"Minnesota\",\n    \"MS\": \"Mississippi\",\n    \"MO\": \"Missouri\",\n    \"MT\": \"Montana\",\n    \"NE\": \"Nebraska\",\n    \"NV\": \"Nevada\",\n    \"NH\": \"New Hampshire\",\n    \"NJ\": \"New Jersey\",\n    \"NM\": \"New Mexico\",\n    \"NY\": \"New York\",\n    \"NC\": \"North Carolina\",\n    \"ND\": \"North Dakota\",\n    \"MP\": \"Northern Mariana Islands\",\n    \"OH\": \"Ohio\",\n    \"OK\": \"Oklahoma\",\n    \"OR\": \"Oregon\",\n    \"PW\": \"Palau\",\n    \"PA\": \"Pennsylvania\",\n    \"PR\": \"Puerto Rico\",\n    \"RI\": \"Rhode Island\",\n    \"SC\": \"South Carolina\",\n    \"SD\": \"South Dakota\",\n    \"TN\": \"Tennessee\",\n    \"TX\": \"Texas\",\n    \"UT\": \"Utah\",\n    \"VT\": \"Vermont\",\n    \"VI\": \"Virgin Islands\",\n    \"VA\": \"Virginia\",\n    \"WA\": \"Washington\",\n    \"WV\": \"West Virginia\",\n    \"WI\": \"Wisconsin\",\n    \"WY\": \"Wyoming\"\n};","import React,{Component} from 'react';\nimport {scaleLinear} from 'd3-scale';\nimport {mean as d3mean,extent as d3extent} from 'd3-array';\n\n\nimport USStatesMap from './USStatesMap';\n\nclass Title extends Component {\n\n    get yearsFragment() {\n     const year = this.props.filteredBy.year;\n\n     return year === '*' ? \"\" : `in ${year}`\n\n    }\n\n    getUSstateFragment() {\n      const USstate = this.props.filteredBy.USstate;\n\n      return USstate === '*' ? \"\" : USStatesMap[USstate.toUpperCase()];\n\n\n    }\n\n    get jobTitleFragment() {\n        const { jobTitle, year} = this.props.filteredBy;\n        let title = \"\";\n\n        if (jobTitle === \"*\") {\n            if (year === \"*\") {\n                title = \" The average H1B in tech pays \"\n            } else {\n                title = \" The average tech H1B paid \"\n            }\n\n        } else {\n            title = `Software ${jobTitle}s on an H1B`;\n            if (year === \"*\") {\n                title += \" make\";\n            } else {\n                title += \" made\";\n            }\n\n        }\n        return title;\n\n\n    }\n\n    get format() {\n\n        return scaleLinear()\n                .domain(d3extent(this.props.data, d=>d.base_salary))\n                .tickFormat();\n\n    }\n\n    render() {\n        \n        const mean = this.format(d3mean(this.props.data, d => d.base_salary));\n        let title;\n\n        if (this.yearsFragment && this.USstateFragment) {\n            title = (\n                <h2>\n                    In {this.USstateFragment}, {this.jobTitleFragment} ${mean}\n                    /year {this.yearsFragment}\n                </h2>\n            );\n        } else {\n            title = (\n                <h2>\n                    {this.jobTitleFragment} ${mean}\n                    /year{\" \"}\n                    {this.USstateFragment\n                        ? `in ${this.stateFragment}`\n                        : \"\"}{\" \"}\n                    {this.yearsFragment}\n                </h2>\n            );\n        }\n\n        return title;\n    }\n\n}\n\nexport default Title;","import React from \"react\";\nimport { scaleLinear } from \"d3-scale\";\nimport {\n    mean as d3mean,\n    extent as d3extent,\n    deviation as d3deviation\n} from \"d3-array\";\nimport _ from \"lodash\";\nimport S from \"string\";\n\nimport USStatesMap from \"./USStatesMap\";\n\nclass Description extends React.Component {\n    allDataForYear(year, data = this.props.allData) {\n        return data.filter(d => d.submit_date.getFullYear() === year);\n    }\n\n    allDataForJobTitle(jobTitle, data = this.props.allData) {\n        return data.filter(d => d.clean_job_title === jobTitle);\n    }\n\n    allDataForUSstate(USstate, data = this.props.allData) {\n        return data.filter(d => d.USstate === USstate);\n    }\n\n    get yearsFragment() {\n        const year = this.props.filteredBy.year;\n\n        return year === \"*\" ? \"\" : `In ${year}`;\n    }\n\n    get USstateFragment() {\n        const USstate = this.props.filteredBy.USstate;\n\n        return USstate === \"*\" ? \"\" : USStatesMap[USstate.toUpperCase()];\n    }\n\n    get previousYearFragment() {\n        const year = this.props.filteredBy.year;\n\n        let fragment;\n\n        if (year === \"*\") {\n            fragment = \"\";\n        } else if (year === 2012) {\n            fragment = \"\";\n        } else {\n            const { USstate, jobTitle } = this.props.filteredBy;\n            let lastYear = this.allDataForYear(year - 1);\n\n            if (jobTitle !== \"*\") {\n                lastYear = this.allDataForJobTitle(jobTitle, lastYear);\n            }\n\n            if (USstate !== \"*\") {\n                lastYear = this.allDataForUSstate(USstate, lastYear);\n            }\n\n            if (this.props.data.length / lastYear.length > 2) {\n                fragment =\n                    \", \" +\n                    (this.props.data.length / lastYear.length).toFixed() +\n                    \" times more than the year before\";\n            } else {\n                const percent = (\n                    (1 - lastYear.length / this.props.data.length) *\n                    100\n                ).toFixed();\n\n                fragment =\n                    \", \" +\n                    Math.abs(percent) +\n                    \"% \" +\n                    (percent > 0 ? \"more\" : \"less\") +\n                    \" than the year before\";\n            }\n        }\n\n        return fragment;\n    }\n\n    get jobTitleFragment() {\n        const jobTitle = this.props.filteredBy.jobTitle;\n        let fragment;\n\n        if (jobTitle === \"*\") {\n            fragment = \"H1B work visas\";\n        } else {\n            if (jobTitle === \"other\") {\n                fragment = \"H1B work visas\";\n            } else {\n                fragment = `H1B work visas for software ${jobTitle}s`;\n            }\n        }\n\n        return fragment;\n    }\n\n    get countyFragment() {\n        const byCounty = _.groupBy(this.props.data, \"countyID\"),\n            medians = this.props.medianIncomesByCounty;\n\n        let ordered = _.sortBy(\n            _.keys(byCounty)\n                .map(county => byCounty[county])\n                .filter(d => d.length / this.props.data.length > 0.01),\n            items =>\n                d3mean(items, d => d.base_salary) -\n                medians[items[0].countyID][0].medianIncome\n        );\n\n        let best = ordered[ordered.length - 1],\n            countyMedian = medians[best[0].countyID][0].medianIncome;\n\n        const byCity = _.groupBy(best, \"city\");\n\n        ordered = _.sortBy(\n            _.keys(byCity)\n                .map(city => byCity[city])\n                .filter(d => d.length / best.length > 0.01),\n            items => d3mean(items, d => d.base_salary) - countyMedian\n        );\n\n        best = ordered[ordered.length - 1];\n\n        const city = S(best[0].city).titleCase().s + `, ${best[0].USstate}`,\n            mean = d3mean(best, d => d.base_salary);\n\n        const jobFragment = this.jobTitleFragment\n            .replace(\"H1B work visas for\", \"\")\n            .replace(\"H1B work visas\", \"\");\n\n        return (\n            <span>\n                The best city{\" \"}\n                {jobFragment.length\n                    ? `for ${jobFragment} on an H1B`\n                    : \"for an H1B\"}{\" \"}\n                {this.yearFragment ? \"was\" : \"is\"} <b>{city}</b> with an average\n                salary ${this.format(mean - countyMedian)} above the local\n                household median. Median household income is a good proxy for\n                cost of living in an area.{\" \"}\n                <a href=\"https://en.wikipedia.org/wiki/Household_income\">[1]</a>\n                .\n            </span>\n        );\n    }\n\n    get format() {\n        return scaleLinear()\n            .domain(d3extent(this.props.data, d => d.base_salary))\n            .tickFormat();\n    }\n\n    render() {\n        const format = this.format,\n            mean = d3mean(this.props.data, d => d.base_salary),\n            deviation = d3deviation(this.props.data, d => d.base_salary);\n\n        return (\n            <p className=\"lead\">\n                {this.yearsFragment ? this.yearsFragment : \"Since 2012\"} the{\" \"}\n                {this.UStateFragment} tech industry{\" \"}\n                {this.yearsFragment ? \"sponsored\" : \"has sponsored\"}{\" \"}\n                <b>\n                    {format(this.props.data.length)} {this.jobTitleFragment}\n                </b>\n                {this.previousYearFragment}. Most of them paid{\" \"}\n                <b>\n                    ${format(mean - deviation)} to ${format(mean + deviation)}\n                </b>{\" \"}\n                per year. {this.countyFragment}\n            </p>\n        );\n    }\n}\n\nexport default Description;","import React,{Component} from \"react\";\nimport * as d3 from \"d3\";\n\n\nconst MedianLine = ({\n    data,\n    value,\n    x,\n    y,\n    width,\n    height,\n    bottomMargin,\n    median\n}) => {\n    const yScale = d3.scaleLinear()\n        .domain([0,d3.max(data,value)])\n        .range([height-y-bottomMargin,0])\n       const line = d3.line()([[0, 5], [width, 5]]);\n\n    const medianValue = median || d3.median(data, value);\n\n    const translate = `translate(${x}, ${yScale(medianValue)})`,\n        medianLabel = `Median Household: $${yScale.tickFormat()(median)}`;\n\n    return (\n        <g className=\"mean\" transform={translate}>\n            <text\n                x={width - 5}\n                y=\"20\"\n                textAnchor=\"end\"\n                style={{ background: \"purple\" }}\n            >\n                {medianLabel}\n            </text>\n            <path d={line} />\n        </g>\n    );\n};\n\nexport default MedianLine;","import React from \"react\";\n\nconst Toggle = ({ label, name, value, onClick }) => {\n    let className = \"btn btn-default\";\n\n    if (value) {\n        className += \" btn-primary\";\n    }\n\n    return (\n        <button className={className} onClick={() => onClick(name, !value)}>\n            {label}\n        </button>\n    );\n};\n\nexport default Toggle;","import React from \"react\";\n\nimport Toggle from \"./Toggle\";\n\nclass ControlRow extends React.Component {\n    makePick = (picked, newState) => {\n        this.props.updateDataFilter(picked, !newState)\n    };\n\n    _addToggle(name) {\n        let key = `toggle-${name}`,\n        label= name;\n\n        if (this.props.capitalize) {\n            label = label.toUpperCase();\n        }\n        return (\n            <Toggle\n            label ={label}\n            name = {name}\n            key = {key}\n            value = {this.props.picked === name}  \n            onClick = {this.makePick}\n            />\n        )\n    }\n\n    render() {\n        const { toggleNames } = this.props;\n\n        return (\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    {toggleNames.map (name => this._addToggle(name))}\n                </div>    \n            </div>\n        )\n    }\n}\n\nexport default ControlRow;","import React from \"react\";\n\nimport ControlRow from \"./ControlRow\";\n\nclass Controls extends React.Component {\n\n    state = {\n        yearFilter: () => true,\n        jobTitleFilter: () => true,\n        USstateFilter: () => true,\n        year: \"*\",\n        jobTitle:\"*\",\n        USstate:\"*\"\n\n    };\n\n    componentDidMount() {\n\n        let [year,USstate, jobTitle] = window.location.hash\n                .replace(\"#\",\"\")\n                .split(\"-\")\n        if (year !== \"*\" && year) {\n            this.updateYearFilter(Number(year));\n        }\n\n        if (USstate !== \"*\" && USstate) {\n            this.updateUSstateFilter(USstate);\n        }\n        if (jobTitle !== \"*\" && jobTitle) {\n            this.updateUSstateFilter(jobTitle);\n        }\n            \n\n    }\n\n    updateYearFilter = (year, reset) => {\n        let filter = d => d.submit_date.getFullYear() === year;\n\n        if (reset || !year) {\n            filter = () => true;\n            year = \"*\";\n        }\n\n        this.setState(\n            {\n                yearFilter: filter,\n                year: year\n            },\n            () => this.reportUpdateUpTheChain()\n        );\n    };\n    updateJobTitleFilter = (title, reset) => {\n        let filter = d => d.clean_job_title === title;\n\n        if (reset || !title) {\n            filter = () => true;\n            title = \"*\";\n        }\n\n        this.setState(\n            {\n                jobTitleFilter: filter,\n                jobTitle: title\n            },\n            () => this.reportUpdateUpTheChain()\n        );\n    };\n\n    updateUSstateFilter = (USstate, reset) => {\n        let filter = d => d.USstate === USstate;\n\n        if (reset || !USstate) {\n            filter = () => true;\n            USstate = \"*\";\n        }\n\n        this.setState(\n            {\n                USstateFilter: filter,\n                USstate: USstate\n            },\n            () => this.reportUpdateUpTheChain()\n        );\n    };\n\n\n    reportUpdateUpTheChain() {\n        window.location.hash = [\n            this.state.year || \"*\",\n            this.state.USstate || \"*\",\n            this.state.jobTitle || \"*\",\n        ].join(\"-\");\n    \n        this.props.updateDataFilter(\n            (filters => {\n                return d =>\n                    filters.yearFilter(d) &&\n                    filters.jobTitleFilter(d) &&\n                    filters.USstateFilter(d);\n            })(this.state),\n            {\n                USstate: this.state.USstate,\n                year: this.state.year,\n                jobTitle: this.state.jobTitle\n            }\n        );\n    }\n\n\n\n\n    render() {\n        const { data } = this.props;\n        const years = new Set (data.map(d=>d.submit_date.getFullYear())),\n        jobTitles = new Set(data.map(d => d.clean_job_title)),\n        USstates = new Set(data.map(d => d.USstate));\n \n        return (\n            <div>\n                <ControlRow\n                    data = {data}\n                    toggleNames = {Array.from(years.values())}\n                    picked = {this.state.year}\n                    updateDataFilter = {this.updateYearFilter}\n                />\n                <ControlRow data={data}\n                            toggleNames={Array.from(jobTitles.values())}\n                            picked={this.state.jobTitle}\n                            updateDataFilter={this.updateJobTitleFilter} />\n\n                <ControlRow data={data}\n                            toggleNames={Array.from(USstates.values())}\n                            picked={this.state.USstate}\n                            updateDataFilter={this.updateUSstateFilter}\n                            capitalize=\"true\" />\n            </div>\n        )\n    }\n}\n\nexport default Controls;\n","import React from 'react';\nimport * as d3 from 'd3';\nimport _ from 'lodash';\n\nimport './style.css';\nimport Preloader from './components/Preloader'\nimport {loadAllData} from './DataHandling'\n\nimport CountyMap from './components/CountyMap'\nimport Histogram from './components/Histogram'\nimport {Title,Description} from './components/Meta'\nimport MedianLine from './components/MedianLine'\nimport Controls from './components/Controls'\n\n\nclass App extends React.Component {\n\n  state = {\n    techSalaries:[],\n    medianIncomes:[],\n    countyNames:[],\n    salariesFilter:()=> true,\n    filteredBy: {\n      USstate: '*',\n      year: '*',\n      jobTitle:'*'\n    }\n  }\n  componentDidMount() {\n    loadAllData(data => this.setState(data));\n  }\n\n\n\ncountyValue (county,techSalariesMap){\n  const medianHousehold = this.state.medianIncomes[county.id],\n  salaries = techSalariesMap[county.name]\n  \n  if (!medianHousehold || !salaries) {\n    return null;\n  }\n  const median = d3.median(salaries,d=>d.base_salary)\n  \n  return {\n    countyID:county.id,\n    value: median - medianHousehold.medianIncome\n  };\n}\n\nupdateDataFilter = (filter, filteredBy) => {\n    this.setState ({\n      salariesFilter:filter,\n      filteredBy:filteredBy\n    });\n  }\n\nrender () {\n    const {countyNames,usTopoJson, techSalaries,USstateNames,filteredBy} = this.state;\n\n    if (techSalaries.length < 1 ){\n      return (\n          <Preloader/>\n        );\n      }\n\n    const filteredSalaries = techSalaries.filter(this.state.salariesFilter),\n      filteredSalariesMap = _.groupBy(filteredSalaries,'countyID'),\n      countyValues = countyNames.map (\n        county => this.countyValue(county,filteredSalariesMap))\n        .filter(d => !_.isNull(d));\n  \n    let zoom = null,\n    medianHousehold = this.state.medianIncomesByUSState['US'][0].medianIncome;\n    if(filteredBy.USstate !== '*') {\n      zoom = this.state.filteredBy.USstate;\n      medianHousehold = d3.mean(this.state.medianIncomesByUSState[zoom], d=>d.medianIncome);\n    }\n      return (\n        <div className=\"App container\">\n          <Title data={filteredSalaries} filteredBy={filteredBy}/>\n          <Description\n                    data={filteredSalaries}\n                    allData={techSalaries}\n                    filteredBy={filteredBy}\n                    medianIncomesByCounty={this.state.medianIncomesByCounty}\n                />\n           <svg width=\"1100\" height=\"500\">\n            <CountyMap usTopoJson={usTopoJson}\n                USstateNames = {USstateNames}\n                values = {countyValues}\n                x={0}\n                y={0}\n                width={500}\n                height ={500}\n                zoom = {zoom} />\n                \n                <rect x=\"500\"\n                   y=\"0\" \n                   width=\"600\" \n                   height =\"500\" \n                   style ={{fill:'white'}}\n                   />\n\n                <Histogram bins ={10}\n                width = {500}\n                height = {500}\n                x=\"500\"\n                y=\"10\"\n                data = {filteredSalaries}\n                axisMargin={83}\n                bottomMargin ={5}\n                value ={d=>d.base_salary}\n                />\n\n                <MedianLine data ={filteredSalaries}\n                  x={500}\n                  y={10}\n                  width={600}\n                  height={500}\n                  bottomMargin={5}\n                  median = {medianHousehold}\n                  value = {d=>d.base_salary}\n                />\n            </svg> \n            <Controls data={techSalaries} updateDataFilter={this.updateDataFilter}/>\n         \n        </div>\n      );\n  }\n\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}